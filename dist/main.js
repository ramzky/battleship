(()=>{"use strict";var e={426:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,"/*@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300;500&display=swap');*/\n\n:root {\n  box-sizing: border-box;\n  --main-size: 60rem; /* 30rem=480px */\n  --sub-color: #8d8d8d;\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana sans-serif;\n  font-family: 'Quicksand', sans-serif;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n.main-container {\n  min-height: 100vh;\n  /*display: flex;*/\n}\n.container {\n  margin: 0 auto;\n  flex: 0 0 auto;\n  /*background-image: url('./bg.jpg');*/\n  /*use below bg on menu tab*/\n  /*background: linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url('./bg.jpg');*/\n}\n.flex-top-box {\n  width: min(max(calc(var(--main-size) + 30rem), 100%), calc(var(--main-size) + 30rem));\n  min-height: calc(var(--main-size) - 20rem);\n  /*border: 0.0625rem solid black;*/\n  background-color: transparent;\n  display: flex;\n  flex-flow: row wrap;\n  margin: 0 auto;\n}\n.flex-box {\n  /*min-height: 2.5rem;*/\n  flex: 0 0 100%;\n  display: flex;\n  flex-flow: row wrap;\n  /*border: 0.0625rem solid goldenrod;*/\n}\n/*\nfor flex let the item that change size\nto set the width of flex container\n**dont set width!\n*/\n.flex-item {\n  flex: 0 0 100%;\n  /*border: 0.0625rem solid goldenrod;*/\n}\n\n.p1side, .cpuside {\n  flex: 0 0 50%;\n  align-items: start;\n  padding: 0 5rem;\n}\n.side {\n  /*background-color: #e4e4e4;*/\n  opacity: 0.5;\n}\nh1 {\n  display: block;\n}\n.board {\n  \n}\n.cell {\n  flex: 0 0 auto;\n  /*border: 0.0625rem solid cornflowerblue;*/\n}\n.cell > button {\n  height: 100%;\n  width: 100%;\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0;\n  background-color: transparent;\n  border: 0.0625rem solid rgb(147, 150, 156);\n  border-radius: .2rem;\n}\n.cell > button:hover {\n  cursor: pointer;\n  color: #7287E9;\n  background-color: #e6e6e6;\n}\n.cell > .ship {\n  border: .2rem solid cornflowerblue;\n}\n.cell > .miss {\n  border-color: #e0482d;\n  background-color: #e27663;\n}\n.cell > .miss:hover {\n  background-color: #e27663;\n}\n.cell > .hit {\n  border-color: #c22f42;\n  background-color: #e97a89;\n  border-width: .2rem;\n}\n.cell > .hit:hover {\n  background-color: #e97a89;\n}\n\n.reset {\n  display: block;\n  margin: 0 auto;\n  padding: 0;\n  background-color: transparent;\n  border: none;\n  border-radius: .2rem;\n  font-size: 1.5rem;\n}\n.reset:hover {\n  cursor: pointer;\n  color: #7287E9;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,+FAA+F;;AAE/F;EACE,sBAAsB;EACtB,kBAAkB,EAAE,gBAAgB;EACpC,oBAAoB;EACpB,0DAA0D;EAC1D,oCAAoC;AACtC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;AACA;EACE,cAAc;EACd,cAAc;EACd,qCAAqC;EACrC,2BAA2B;EAC3B,gFAAgF;AAClF;AACA;EACE,qFAAqF;EACrF,0CAA0C;EAC1C,iCAAiC;EACjC,6BAA6B;EAC7B,aAAa;EACb,mBAAmB;EACnB,cAAc;AAChB;AACA;EACE,sBAAsB;EACtB,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,qCAAqC;AACvC;AACA;;;;CAIC;AACD;EACE,cAAc;EACd,qCAAqC;AACvC;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,6BAA6B;EAC7B,YAAY;AACd;AACA;EACE,cAAc;AAChB;AACA;;AAEA;AACA;EACE,cAAc;EACd,0CAA0C;AAC5C;AACA;EACE,YAAY;EACZ,WAAW;EACX,eAAe;EACf,eAAe;EACf,UAAU;EACV,6BAA6B;EAC7B,0CAA0C;EAC1C,oBAAoB;AACtB;AACA;EACE,eAAe;EACf,cAAc;EACd,yBAAyB;AAC3B;AACA;EACE,kCAAkC;AACpC;AACA;EACE,qBAAqB;EACrB,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;AACrB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,cAAc;EACd,cAAc;EACd,UAAU;EACV,6BAA6B;EAC7B,YAAY;EACZ,oBAAoB;EACpB,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,cAAc;AAChB",sourcesContent:["/*@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300;500&display=swap');*/\r\n\r\n:root {\r\n  box-sizing: border-box;\r\n  --main-size: 60rem; /* 30rem=480px */\r\n  --sub-color: #8d8d8d;\r\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana sans-serif;\r\n  font-family: 'Quicksand', sans-serif;\r\n}\r\n*, *::before, *::after {\r\n  box-sizing: inherit;\r\n}\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.main-container {\r\n  min-height: 100vh;\r\n  /*display: flex;*/\r\n}\r\n.container {\r\n  margin: 0 auto;\r\n  flex: 0 0 auto;\r\n  /*background-image: url('./bg.jpg');*/\r\n  /*use below bg on menu tab*/\r\n  /*background: linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url('./bg.jpg');*/\r\n}\r\n.flex-top-box {\r\n  width: min(max(calc(var(--main-size) + 30rem), 100%), calc(var(--main-size) + 30rem));\r\n  min-height: calc(var(--main-size) - 20rem);\r\n  /*border: 0.0625rem solid black;*/\r\n  background-color: transparent;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  margin: 0 auto;\r\n}\r\n.flex-box {\r\n  /*min-height: 2.5rem;*/\r\n  flex: 0 0 100%;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  /*border: 0.0625rem solid goldenrod;*/\r\n}\r\n/*\r\nfor flex let the item that change size\r\nto set the width of flex container\r\n**dont set width!\r\n*/\r\n.flex-item {\r\n  flex: 0 0 100%;\r\n  /*border: 0.0625rem solid goldenrod;*/\r\n}\r\n\r\n.p1side, .cpuside {\r\n  flex: 0 0 50%;\r\n  align-items: start;\r\n  padding: 0 5rem;\r\n}\r\n.side {\r\n  /*background-color: #e4e4e4;*/\r\n  opacity: 0.5;\r\n}\r\nh1 {\r\n  display: block;\r\n}\r\n.board {\r\n  \r\n}\r\n.cell {\r\n  flex: 0 0 auto;\r\n  /*border: 0.0625rem solid cornflowerblue;*/\r\n}\r\n.cell > button {\r\n  height: 100%;\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  background-color: transparent;\r\n  border: 0.0625rem solid rgb(147, 150, 156);\r\n  border-radius: .2rem;\r\n}\r\n.cell > button:hover {\r\n  cursor: pointer;\r\n  color: #7287E9;\r\n  background-color: #e6e6e6;\r\n}\r\n.cell > .ship {\r\n  border: .2rem solid cornflowerblue;\r\n}\r\n.cell > .miss {\r\n  border-color: #e0482d;\r\n  background-color: #e27663;\r\n}\r\n.cell > .miss:hover {\r\n  background-color: #e27663;\r\n}\r\n.cell > .hit {\r\n  border-color: #c22f42;\r\n  background-color: #e97a89;\r\n  border-width: .2rem;\r\n}\r\n.cell > .hit:hover {\r\n  background-color: #e97a89;\r\n}\r\n\r\n.reset {\r\n  display: block;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: .2rem;\r\n  font-size: 1.5rem;\r\n}\r\n.reset:hover {\r\n  cursor: pointer;\r\n  color: #7287E9;\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);t&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=t.base?s[0]+t.base:s[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=r(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var h=o(p,t);t.byIndex=c,n.splice(c,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);n[c].references--}for(var s=t(e,o),l=0;l<a.length;l++){var A=r(a[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=s}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{class e{constructor(e){var n;this.proxy=new Proxy(e,(n=this.#e.bind(this),{get(e,n,r){return Reflect.get(...arguments)},set(e,r,t,o){let a=e[r],i=Reflect.set(e,r,t,o);return i&&n(t,a),i}}))}#n=[];#e(e,n){this.#n.length>0&&this.#n.forEach((r=>r(e,n)))}add(e){e&&this.#n.push(e)}reset(){this.#n.splice(0)}}class n{constructor(e){this.container=e}#n=[];#e(e,n){this.#n.length>0&&this.#n.forEach((r=>r(this.container,e,n)))}onChange(e){return this.#n.push(e),this}listenTo(e){return e.add(this.#e.bind(this)),this}unsubscribe(e){e.reset()}reset(){this.#n.splice(0)}el(e,n,r){this.container.addEventListener(e,n,r)}rl(e,n,r){this.container.removeEventListener(e,n,r)}}const t=(e=2)=>{let n=0;return{hit:()=>++n,isSunk:()=>n>=e,getLength:()=>e}},o=(e,n,r,t=2,o="-")=>{let a=o,i=!1;const c=[],s=[];if(t<=10){let o=r,s=0;for(let r=0;r<t;r++)e[n][o].proxy.data===a&&(++s,c.push([n,o])),s===t&&(i=!0),o++}if(t<=10){let o=n,c=0;for(let n=0;n<t;n++)e[o][r].proxy.data===a&&(++c,s.push([o,r])),c===t&&(i=!0),o++}return c.length===t&&s.length===t?0===Math.floor(2*Math.random())?c:s:c.length===t?c:s.length===t?s:[]},a=()=>{const n=((n=10)=>{const r=[];for(let t=0;t<n;t++){r[t]=[];for(let o=0;o<n;o++)r[t].push(new e({data:"-"}))}return r})(),r=[],a=[],i=(e,r)=>{let t=10-r+1,a=Math.trunc(Math.random()*t),i=Math.trunc(Math.random()*t),c=[];for(;0===c.length;)c=o(n,a,i,r),a=Math.trunc(Math.random()*t),i=Math.trunc(Math.random()*t);c.forEach((r=>n[r[0]][r[1]].proxy.data=e))};return(()=>{for(let e=0;e<6;e++)r[e]=e<4?t(3):t(),i(e,r[e].getLength())})(),{receiveAttack:(e,t)=>{((e,r)=>"number"==typeof n[e][r].proxy.data)(e,t)&&r[n[e][t].proxy.data].hit(),n[e][t].proxy.data="X",a.push(`${e},${t}`)},getBoardValue:(e,r)=>n[e][r].proxy.data,allSunk:()=>r.filter((e=>!e.isSunk())).length<=0,getBoard:()=>n,checkAtk:(e,n)=>!!a.includes(`${e},${n}`)}},i=(e,n)=>{let r=!1;return{attack:(e,t,o)=>{if(!0===r){if(e.getBoard().checkAtk(t,o))return;return e.receiveAttack(t,o),e.setTurn(!0),r=!1,e.noShip()&&(console.log(`${n} wins!`),e.setTurn(!1)),!0}return!1},receiveAttack:(n,r)=>{e.receiveAttack(n,r)},noShip:()=>!!e.allSunk(),setTurn:e=>r=e,getTurn:()=>r,getBoard:()=>e,name:n}};class c{constructor(e,n=!1){this.containerList=e,this.#r=n}#r=!1;#t=new e({data:void 0});#e(e){this.#t.proxy.data=parseInt(e.target.dataset.index)}#o(e){const r=Array.from(this.containerList).map((e=>new n(e)));for(let n=0;n<r.length;n++)r[n].listenTo(e[n]).onChange(((e,n,r)=>{e.classList.add("miss"),"number"==typeof r&&e.classList.add("hit")})),r[n].el("click",(e=>this.#e(e))),r[n].container.setAttribute("data-index",n),"number"==typeof e[n].proxy.data&&(this.#r||r[n].container.classList.add("ship"))}getInput(){return this.#t}display(e,n){n?n(e,this.containerList):this.#o(e)}}function s(e=10,n){const r=[],t=[],o=n,a=window.getComputedStyle(o).getPropertyValue("width"),i=parseInt(a,10)/e;for(let n=0;n<e**2;n++)r.push(document.createElement("div")),t.push(document.createElement("button")),r[n].style.cssText=`width: ${i}px;height: ${i}px;`,r[n].classList.add("cell"),o.appendChild(r[n]),r[n].appendChild(t[n])}const l=e=>{const n=e.length,r=[];for(let t=0;t<n;t++)for(let o=0;o<n;o++)r.push(e[t][o]);return r},A=e=>{document.querySelector(".win2").textContent=`${e.name.toUpperCase()} wins!`},d=()=>{const n=10;s(n,document.querySelector(".p1side .board")),s(n,document.querySelector(".cpuside .board")),document.querySelector(".win2").textContent="Click on cpu tile to start...";const r=a(),t=i(r,"player 1");t.setTurn(!0);const o=a(),d=i(o,"cpu"),u=(()=>{let n=[],r=new e({data:void 0});return(()=>{for(let e=0;e<100;++e)n.push(e);n=(e=>{let n=[];for(let r=99;r>=0;--r){let t=Math.floor(Math.random()*r);n.push(e.splice(e.indexOf(e[t]),1)[0])}return n})(n)})(),{getInput:()=>r,start:()=>{r.proxy.data=n.shift()}}})();new c(document.querySelectorAll(".p1side button")).display(l(r.getBoard())),u.getInput().add((e=>{setTimeout((()=>{d.attack(t,Math.floor(e/n),e%n),t.noShip()&&A(d)}),500)}));const p=new c(document.querySelectorAll(".cpuside button"),!0);p.display(l(o.getBoard())),p.getInput().add((e=>{document.querySelector(".win2").textContent="";let r=t.attack(d,Math.floor(e/n),e%n);d.noShip()&&A(t),r&&u.start()}))};var u=r(379),p=r.n(u),h=r(795),f=r.n(h),m=r(569),C=r.n(m),b=r(565),g=r.n(b),E=r(216),y=r.n(E),B=r(589),x=r.n(B),v=r(426),k={};k.styleTagTransform=x(),k.setAttributes=g(),k.insert=C().bind(null,"head"),k.domAPI=f(),k.insertStyleElement=y(),p()(v.Z,k),v.Z&&v.Z.locals&&v.Z.locals,d(),document.querySelector(".reset").addEventListener("click",(()=>{document.querySelector(".p1side .board").textContent="",document.querySelector(".cpuside .board").textContent="",d()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,